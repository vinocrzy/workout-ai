/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Routine } from "./Routine";
import { RoutineCountArgs } from "./RoutineCountArgs";
import { RoutineFindManyArgs } from "./RoutineFindManyArgs";
import { RoutineFindUniqueArgs } from "./RoutineFindUniqueArgs";
import { CreateRoutineArgs } from "./CreateRoutineArgs";
import { UpdateRoutineArgs } from "./UpdateRoutineArgs";
import { DeleteRoutineArgs } from "./DeleteRoutineArgs";
import { LogFindManyArgs } from "../../log/base/LogFindManyArgs";
import { Log } from "../../log/base/Log";
import { WorkoutFindManyArgs } from "../../workout/base/WorkoutFindManyArgs";
import { Workout } from "../../workout/base/Workout";
import { RoutineService } from "../routine.service";
@graphql.Resolver(() => Routine)
export class RoutineResolverBase {
  constructor(protected readonly service: RoutineService) {}

  async _routinesMeta(
    @graphql.Args() args: RoutineCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Routine])
  async routines(
    @graphql.Args() args: RoutineFindManyArgs
  ): Promise<Routine[]> {
    return this.service.routines(args);
  }

  @graphql.Query(() => Routine, { nullable: true })
  async routine(
    @graphql.Args() args: RoutineFindUniqueArgs
  ): Promise<Routine | null> {
    const result = await this.service.routine(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Routine)
  async createRoutine(
    @graphql.Args() args: CreateRoutineArgs
  ): Promise<Routine> {
    return await this.service.createRoutine({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Routine)
  async updateRoutine(
    @graphql.Args() args: UpdateRoutineArgs
  ): Promise<Routine | null> {
    try {
      return await this.service.updateRoutine({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Routine)
  async deleteRoutine(
    @graphql.Args() args: DeleteRoutineArgs
  ): Promise<Routine | null> {
    try {
      return await this.service.deleteRoutine(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Log], { name: "logs" })
  async findLogs(
    @graphql.Parent() parent: Routine,
    @graphql.Args() args: LogFindManyArgs
  ): Promise<Log[]> {
    const results = await this.service.findLogs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Workout], { name: "workouts" })
  async findWorkouts(
    @graphql.Parent() parent: Routine,
    @graphql.Args() args: WorkoutFindManyArgs
  ): Promise<Workout[]> {
    const results = await this.service.findWorkouts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
