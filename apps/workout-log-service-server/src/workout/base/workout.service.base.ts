/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Workout as PrismaWorkout,
  Routine as PrismaRoutine,
} from "@prisma/client";

export class WorkoutServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WorkoutCountArgs, "select">): Promise<number> {
    return this.prisma.workout.count(args);
  }

  async workouts<T extends Prisma.WorkoutFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkoutFindManyArgs>
  ): Promise<PrismaWorkout[]> {
    return this.prisma.workout.findMany<Prisma.WorkoutFindManyArgs>(args);
  }
  async workout<T extends Prisma.WorkoutFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkoutFindUniqueArgs>
  ): Promise<PrismaWorkout | null> {
    return this.prisma.workout.findUnique(args);
  }
  async createWorkout<T extends Prisma.WorkoutCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkoutCreateArgs>
  ): Promise<PrismaWorkout> {
    return this.prisma.workout.create<T>(args);
  }
  async updateWorkout<T extends Prisma.WorkoutUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkoutUpdateArgs>
  ): Promise<PrismaWorkout> {
    return this.prisma.workout.update<T>(args);
  }
  async deleteWorkout<T extends Prisma.WorkoutDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkoutDeleteArgs>
  ): Promise<PrismaWorkout> {
    return this.prisma.workout.delete(args);
  }

  async getRoutine(parentId: string): Promise<PrismaRoutine | null> {
    return this.prisma.workout
      .findUnique({
        where: { id: parentId },
      })
      .routine();
  }
}
